#!/usr/bin/with-contenv bashio

# Get configuration from Home Assistant
PORT=$(bashio::config 'port')
DATABASE=$(bashio::config 'database')
LOG_LEVEL=$(bashio::config 'log_level')
ADMIN_EMAIL=$(bashio::config 'admin_email')
ADMIN_PASSWORD=$(bashio::config 'admin_password')

# Authentik configuration
AUTHENTIK_ENABLED=$(bashio::config 'authentik_enabled')
AUTHENTIK_URL=$(bashio::config 'authentik_url')
AUTHENTIK_CLIENT_ID=$(bashio::config 'authentik_client_id')
AUTHENTIK_CLIENT_SECRET=$(bashio::config 'authentik_client_secret')
AUTHENTIK_AUTO_PROVISION=$(bashio::config 'authentik_auto_provision')

# Set environment variables
export NODE_ENV=production
export ENVIRONMENT=prod
export DATABASE=${DATABASE:-sqlite}
export PORT=${PORT:-3000}
export LOG_LEVEL=${LOG_LEVEL:-info}

# Set Authentik environment variables if enabled
if [ "$AUTHENTIK_ENABLED" = "true" ] && [ -n "$AUTHENTIK_URL" ]; then
    export OAUTH_PROVIDER_NAME="authentik"
    export OAUTH_AUTHORIZATION_URL="${AUTHENTIK_URL}/application/o/authorize/"
    export OAUTH_TOKEN_URL="${AUTHENTIK_URL}/application/o/token/"
    export OAUTH_CLIENT_ID="$AUTHENTIK_CLIENT_ID"
    export OAUTH_CLIENT_SECRET="$AUTHENTIK_CLIENT_SECRET"
    export OAUTH_AUTO_PROVISION="$AUTHENTIK_AUTO_PROVISION"
    bashio::log.info "Authentik SSO enabled with URL: $AUTHENTIK_URL"
fi

# Ingress configuration
if bashio::var.has_value "$(bashio::addon.ingress_entry)"; then
    export INGRESS_PATH="$(bashio::addon.ingress_entry)"
    bashio::log.info "Ingress enabled with path: $INGRESS_PATH"
    export PUBLIC_URL="$INGRESS_PATH"
    export INGRESS_PORT="$PORT"
else
    export INGRESS_PATH=""
    export PUBLIC_URL=""
fi

# Set data directory
export DATA_DIR=/data
mkdir -p $DATA_DIR

# Set database path for SQLite
if [ "$DATABASE" = "sqlite" ]; then
    export DATABASE_URL="file:$DATA_DIR/pangolin.db"
else
    bashio::log.info "PostgreSQL database configuration not yet implemented"
fi

bashio::log.info "Starting Pangolin Reverse Proxy..."
bashio::log.info "Port: $PORT"
bashio::log.info "Database: $DATABASE"
bashio::log.info "Log Level: $LOG_LEVEL"
if [ -n "$INGRESS_PATH" ]; then
    bashio::log.info "Ingress Path: $INGRESS_PATH"
fi

# Enhanced debugging - comprehensive file system exploration
bashio::log.info "=== COMPREHENSIVE FILE SYSTEM DEBUG ==="
bashio::log.info "Current working directory: $(pwd)"
bashio::log.info "Contents of current directory:"
ls -la || true

bashio::log.info "=== Checking /app directory ==="
if [ -d "/app" ]; then
    bashio::log.info "Contents of /app:"
    ls -la /app || true
    bashio::log.info "JavaScript/Node files in /app:"
    ls -la /app/*.js /app/*.mjs /app/*.json 2>/dev/null || bashio::log.info "No direct JS files in /app"
else
    bashio::log.info "/app directory does not exist"
fi

bashio::log.info "=== Checking /app/final directory ==="
if [ -d "/app/final" ]; then
    bashio::log.info "Contents of /app/final:"
    ls -la /app/final || true
    bashio::log.info "JavaScript/Node files in /app/final:"
    ls -la /app/final/*.js /app/final/*.mjs /app/final/*.json 2>/dev/null || bashio::log.info "No direct JS files in /app/final"
else
    bashio::log.info "/app/final directory does not exist"
fi

bashio::log.info "=== Checking subdirectories ==="
for dir in "/app/dist" "/app/final/dist" "/app/.next" "/app/final/.next" "/app/server" "/app/final/server"; do
    if [ -d "$dir" ]; then
        bashio::log.info "Contents of $dir:"
        ls -la "$dir" || true
    else
        bashio::log.info "$dir does not exist"
    fi
done

bashio::log.info "=== Searching for ALL JavaScript files recursively ==="
# Use a safer approach to find JS files
bashio::log.info "Searching for .js files:"
ls -la /app/*.js 2>/dev/null || true
ls -la /app/*/*.js 2>/dev/null || true
ls -la /app/*/*/*.js 2>/dev/null || true

bashio::log.info "Searching for .mjs files:"
ls -la /app/*.mjs 2>/dev/null || true
ls -la /app/*/*.mjs 2>/dev/null || true
ls -la /app/*/*/*.mjs 2>/dev/null || true

bashio::log.info "=== Checking package.json and start scripts ==="
for pkgjson in "/app/package.json" "/app/final/package.json"; do
    if [ -f "$pkgjson" ]; then
        bashio::log.info "Found package.json at $pkgjson"
        bashio::log.info "Package scripts section:"
        grep -A 10 '"scripts"' "$pkgjson" || true
    else
        bashio::log.info "No package.json at $pkgjson"
    fi
done

# Try to start from the original Pangolin source first
bashio::log.info "=== Attempting to start from original Pangolin source ==="
cd /app || bashio::log.error "Could not change to /app"

if [ -f "package.json" ]; then
    bashio::log.info "Found package.json in /app, checking start script"
    if grep -q '"start"' package.json; then
        bashio::log.info "Found start script, attempting npm start"
        exec npm start
    elif [ -f "dist/server.mjs" ]; then
        bashio::log.info "No start script, but found dist/server.mjs"
        exec node --enable-source-maps dist/server.mjs
    elif [ -f ".next/standalone/server.js" ]; then
        bashio::log.info "Found Next.js standalone server"
        exec node .next/standalone/server.js
    else
        bashio::log.error "Found package.json but no recognizable start method"
    fi
else
    bashio::log.info "No package.json in /app, trying /app/final"
    cd /app/final || bashio::log.error "Could not change to /app/final"
    
    if [ -f "package.json" ]; then
        bashio::log.info "Found package.json in /app/final"
        if grep -q '"start"' package.json; then
            bashio::log.info "Found start script, attempting npm start"
            exec npm start
        elif [ -f "server.js" ]; then
            bashio::log.info "Found server.js in /app/final"
            exec node server.js
        elif [ -f ".next/standalone/server.js" ]; then
            bashio::log.info "Found Next.js standalone server in /app/final"
            exec node .next/standalone/server.js
        else
            bashio::log.error "Found package.json but no recognizable server file"
        fi
    else
        bashio::log.error "Could not find package.json or any server files"
        bashio::log.info "Final attempt: listing everything in /app recursively"
        ls -laR /app 2>/dev/null || bashio::log.error "Cannot list /app contents"
        exit 1
    fi
fi