#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start Pangolin service
# ==============================================================================

declare port
declare database
declare log_level
declare admin_email
declare admin_password
declare authentik_enabled
declare authentik_url
declare authentik_client_id
declare authentik_client_secret
declare authentik_auto_provision

# Get configuration from Home Assistant
port=$(bashio::config 'port')
database=$(bashio::config 'database')
log_level=$(bashio::config 'log_level')
admin_email=$(bashio::config 'admin_email')
admin_password=$(bashio::config 'admin_password')
authentik_enabled=$(bashio::config 'authentik_enabled')
authentik_url=$(bashio::config 'authentik_url')
authentik_client_id=$(bashio::config 'authentik_client_id')
authentik_client_secret=$(bashio::config 'authentik_client_secret')
authentik_auto_provision=$(bashio::config 'authentik_auto_provision')

# Set environment variables
export NODE_ENV=production
export ENVIRONMENT=prod
export DATABASE=${database:-sqlite}
export PORT=${port:-3000}
export LOG_LEVEL=${log_level:-info}

# Set Authentik environment variables if enabled
if bashio::var.true "${authentik_enabled}" && bashio::var.has_value "${authentik_url}"; then
    export OAUTH_PROVIDER_NAME="authentik"
    export OAUTH_AUTHORIZATION_URL="${authentik_url}/application/o/authorize/"
    export OAUTH_TOKEN_URL="${authentik_url}/application/o/token/"
    export OAUTH_CLIENT_ID="${authentik_client_id}"
    export OAUTH_CLIENT_SECRET="${authentik_client_secret}"
    export OAUTH_AUTO_PROVISION="${authentik_auto_provision}"
    bashio::log.info "Authentik SSO enabled with URL: ${authentik_url}"
fi

# Ingress configuration
if bashio::var.has_value "$(bashio::addon.ingress_entry)"; then
    export INGRESS_PATH="$(bashio::addon.ingress_entry)"
    bashio::log.info "Ingress enabled with path: ${INGRESS_PATH}"
    export PUBLIC_URL="${INGRESS_PATH}"
else
    export INGRESS_PATH=""
    export PUBLIC_URL=""
fi

# Set data directory
export DATA_DIR=/data

# Set database path for SQLite
if [[ "${database}" == "sqlite" ]]; then
    export DATABASE_URL="file:${DATA_DIR}/pangolin.db"
else
    bashio::log.info "PostgreSQL database configuration not yet implemented"
fi

bashio::log.info "Starting Pangolin Reverse Proxy..."
bashio::log.info "Port: ${port}"
bashio::log.info "Database: ${database}"
bashio::log.info "Log Level: ${log_level}"
if bashio::var.has_value "${INGRESS_PATH}"; then
    bashio::log.info "Ingress Path: ${INGRESS_PATH}"
fi

# Change to app directory
cd /app/final || bashio::exit.nok "Could not change to app directory"

# Run database migrations
bashio::log.info "Running database migrations..."
node dist/migrations.mjs || bashio::exit.nok "Failed to run database migrations"

# Start the server
bashio::log.info "Starting Pangolin server..."
exec node --enable-source-maps dist/server.mjs